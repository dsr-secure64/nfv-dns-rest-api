#%RAML 1.0

# File: command_and_control-v1.raml
# This is the top-level file to include traits, schemas, examples, etc..
# The endpoints in this API file describe the command and control resources available
# through the API. Those types of actions include: instantiation, configuration,
# provisioning, and lifecycle state changes.

title: Secure64 Ve-VNFM API
version: v1.0
protocols: [ HTTPS ]
baseUri: https://{host}/api/{version}
baseUriParameters:
  host:
    description: |
      The node running the Ve-VNFM API.
mediaType:  application/json

# Resources
/sys:
  description: VNF Instance
  is: [ 4xx ]
  get:
    description: |
      GET is used to retrieve on-demand system configuration like EMS address/URL and NETCONF IP address/port. The `sys_id`, `ems_address`, `netconf_ip`, and `status` can be used for `filter` and `sort` query-string parameters.
    is: [ limitable, sortable, sys_id_filterable, ems_address_filterable, netconf_ip_filterable, status_filterable ]
    responses:
      200:
        description: |
          The following example shows a successful response.
        body:
          application/json:
            type: object
            example: !include examples/get_sys_ret.example
  post:
    description: |
      A VNF instance is instantiated by using ReST POST API with a system definition. The system definition contains required parameters for minimum system configuration.
    is: [ 2xx, 200_with_errors ]
    body:
      application/json:
        type: object
        properties:
          sys_id: SysID
          ems_address: EMSAddress
          netconf_ip: NetconfIP
          netconf_port: NetconfPort
          timeout: Timeout
          auth: Auth
          identity: Identity
          vnfc_ids: VNFCIDS
          int_connection_points: IntConnectionPoints
          ext_connection_points: ExtConnectionPoints
          status: Status
  put:
    description: |
      The PUT operation is to change VNF configuration or to perform change-config/start/stop/restart the system.
    is: [ 2xx, 200_with_errors ]
    body:
      application/json:
        properties:
          sys_id: SysID
          operation: Operation
          config-parameters?: ConfigParameters
          vnfc_ids: VNFCIDS
          int_connection_points: IntConnectionPoints
          ext_connection_points: ExtConnectionPoints
          stop-start-parameters?: StopRestartParameters
  delete:
    description: |
      The DELETE operation is to terminate the VNF instance.
    is: [ 2xx, 200_with_errors ]
    body:
      application/json:
        properties:
          sys_id: SysID
          mode: Mode
/vnfcs:
  description: VNFC Instance
  is: [ 4xx ]
  get:
    description: |
      The GET operation on `/vnfcs` is used to retrieve INS/OOS status and resource information for all VNFCs. The request *may* contain a `filter` criterion that shall contain a list of parameters in which the VNFM is interested.

      The `vnfc_id` and `status` may be used for `filter` and `sort` query-string parameters.
    is: [ limitable, sortable, vnfc_id_filterable, 200_with_errors ]
    responses:
      200:
        body:
          application/json:
            properties:
              vnfcs: VNFC[]
  post:
    description: |
      The POST operation on `vnfcs` is for scaling out VNFC(s) in a distributed VNF architecture.
    is: [ 2xx, 200_with_errors ]
    body:
      application/json:
        properties:
          sys_id: SysID
          trigger:
            type: string
            description: |
              A trigger that indicates ythat VNFC(s) need to be added
            example: "system overload"
          number_vnfcs:
            type: integer
            description: |
              The number of VNFC(s)
          vnfcs_vdus_list: !include parameters/vnfcs_vdus_list.raml
          timeout: Timeout
  put:
    description: |
      the PUT operation onf `/vnfcs` is to start, stop, or restart all VNFCs in a distributed VNF architecture.
    is: [ 2xx, 200_with_errors ]
    body:
      application/json:
        properties:
          operation: Operation
  delete:
    description: |
      The DELETE operation onf `/vnfcs` is for scaling in VNFC(s) in a distributed VNF architecture.
    is: [ 2xx, 200_with_errors ]
    body:
      application/json:
        properties:
          sys_id: SysID
          vnfcs_vdus_list?: !include parameters/vnfcs_vdus_list.raml
          mode: Mode
  /{vnfc-id}:
    description: |
      A VNFC instance as specified by `{vnfc-id}`.
    put:
      description: |
        The PUT operation on `/vnfcs/{vnfc-id}` is used to start, stop, or restart a specific VNFC in a distributed VNF architecture.
      is: [ 2xx, 200_with_errors ]
      body:
        application/json:
          properties:
            operation: Operation
/zones:
  description: |
    Metadata about zones in the VNF.

    `vnfc_id` may be used as a filter.
  is: [ 4xx, vnfc_id_filterable ]
  get:
    description: |
      Get metadata about all zones from the system, unless `vnfc_id` is specified as a filter.
  /{zone}:
    description: |
      Metadata about zone `zone` in the VNF, unless `vnfc_id` is specified as a filter.
    get:
      description: |
        Retrieve metadata about `zone` from the VNF system, unless `vnfc_id` is specified as a filter.
    post:
      description: |
        Create a new (empty) zone across all VNFCs in the VNF. If `vnfc_id` is used a filter, `zone` will only be created on the filtered vnfc_ids.
      is:  [ 200_with_errors ]
      body:
        application/json:
          properties:
            name:
              type: string
              enum: [ "master", "slave" ]
            serial:
              type: integer
    put:
      description: |
        Replace `zone` with a new representation. This representation is supplied by the client in the form of a file upload.
        As such this request takes the Content-Type `applicatoin/x-www-form-urlencoded`. Unlike the POST call to create a new and empty zone, the file representation contains all the zone data.
      body:
        application/x-www-form-urlencoded:
          properties:
            zone_file:
              type: file
    delete:
      description: |
        Delete zone across all VNFCs in the VNF. If `vnfc_id` is used a filter, `zone` will only be deleted on the filtered vnfc_ids.
      is:  [ 200_with_errors ]
    /rrsets:
      description: |
        Metadata about RRsets for `zone` of all types across the entire VNF.
      get:
        description: |
          Retrieve metadata about RRsets for `zone` of all types across the entire VNF.
      /{rrset_type}:
        description: |
          RRsets of type `rrset_type` in `zone` across the entire VNF.
        get:
          description: |
            Retrieve metadata about RRsets for `zone` of type `rrset_type`.
        /{label}:
          get:
            description: |
              Retrieve all RRset data for `label` in `zone`.
          post:
            description: |
              Create an RRSet of type `rrset_type` in `zone` under `label`.
            body:
              application/json:
                type: object
                properties:
                  ttl: TTL
                  rdata: RRSet
                example: {"ttl":3600,"rdata":["1.2.3.4","5.6.7.8"]}
          delete:
            description: |
              Delete the RRset of type `rrset_type` for `label` in `zone`.
/queue:
  description: |
    The `/queue` resource represents the status of Asynchronous task requests.
    If a task is queued, the response will contain a `202 Accepted` HTTP Status Code and a corresponding task identifier.
  get:
  /{task_id}:
/auth:
  get:
    description: |

# Includes go here. These pull in DataTypes and Traits
types: !include types/types.raml
traits: !include traits/traits.raml
